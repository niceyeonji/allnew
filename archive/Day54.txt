Day-54


### Lightsail wordpress 생성

platform : Linux

blueprint : wordpress

Choose your instance plan : $10

Create Instance 클릭

터미널 접속 후 

43.201.146.60

$ cat bitnami_application_password
8i8J1ogkPU0Q

http://43.201.146.60/wp-login.php

user
8i8J1ogkPU0Q

wordpress 접속 후 홈페이지 생성 후 활용…


### Lambda

AWS Lamba -> 함수 생성

블루프린트 사용 -> 검색창에 hello-world-python

Hello world fucntion 선택 -> 구성

함수 이름 : hello-world-python

실행 역할 : AWS 정책 템플릿에서 새 역할 생성

역할 이름 : lambda_basic_execution 

함수 생성 클릭 

## 테스트 -> configure-test-event

이벤트 이름

HelloWorldEvent

{
  "key1": "Hello, World",
  "key2": "Hello, Linux",
  "key3": "Hello, AWS"
}

Test 를 클릭 하시면 실행 결과가 나옴.


### calc lambda function

AWS Lamba -> 함수 생성

새로 작성

함수 이름 : calc

함수 생성 클릭 

## calc_function.py

def calc_handler(event, context):
    number1 = event['Number1']
    number2 = event['Number2']
    sum = number1 + number2
    product = number1 * number2
    difference = abs(number1 - number2)
    quotient = number1 / number2
    
    return {
        "Number1" : number1,
        "Number2" : number2,
        "Sum" : sum,
        "Product" : product, 
        "Difference" : difference,
        "Quotient" : quotient
    }

deploy 버튼 클릭


## 테스트 -> configure-test-event

이벤트 이름

calc_test

{
  "Number1": 2,
  "Number2": 3
}

Test 를 클릭 하시면 실행 결과가 나옴.


## 트리거 추가 클릭

트리거 구성 : API 게이트웨이 선택

의도 : 새 API 생성

API 유형 : REST API

보안 : 열기

추가 클릭

코드 클릭 후 코드 수정..

import json

def calc_handler(event, context):
    number1 = int(event['queryStringParameters']['Number1'])
    number2 = int(event['queryStringParameters']['Number2'])
    sum = number1 + number2
    product = number1 * number2
    difference = abs(number1 - number2)
    quotient = number1 / number2
    
    return {
        'statusCode' : 200,
        'body' : json.dumps({
                    "Number1" : number1,
                    "Number2" : number2,
                    "Sum" : sum,
                    "Product" : product, 
                    "Difference" : difference,
                    "Quotient" : quotient
        })
    }

수정 완료 후 deploy 클릭

런타임 설정 -> 핸들러 -> 편집
calc_function.calc_handler

구성 항목을 클릭한 후, calc-API 링크를 클릭하여 API Gateway 콘솔로 이동

오른쪽 창에 메서드 요청 클릭 -> 요청 검사기 옆에 연필 클릭 ->
본문, 쿼리 문자열 파라미터 및 헤더 검사로 변경 ->
URL 쿼리 문자열 파라미터 옆 작은 삼각형 클릭해서 확장.
쿼리 문자열 추가 -> Number1 필수, Number2 필수 ->
상단에 메서드 실행 눌러서 이동..

테스트를 클릭..

메서드를 GET으로 변경 -> 쿼리 문자열에 Number1=3&Number2=4 입력.

테스트 버튼 클릭..

테스트 성공 후 postman 열고 lambda 함수 API 엔드포인트 복사 한 후에 테스트….

API 엔드포인트: https://k65dshuos7.execute-api.ap-northeast-2.amazonaws.com/default/calc



### randomNum lambda function

## randomNum_function.py

AWS Lamba -> 함수 생성

새로 작성

함수 이름 : randomNum

함수 생성 클릭 

def randomNum_handler(event, context):
    import random
    
    max = event[‘Max’]
    ranNum = random.randint(1, max)
    return {
            "Max":max,
            "randomNum" : ranNum
    }

deploy 버튼 클릭


## 테스트 -> configure-test-event

이벤트 이름

randomNum_test

{
  “Max”: 10,
}

Test 를 클릭 하시면 실행 결과가 나옴.


## 트리거 추가 클릭

트리거 구성 : API 게이트웨이 선택

의도 : 새 API 생성

API 유형 : REST API

보안 : 열기

추가 클릭

코드 클릭 후 코드 수정..

import json

def randomNum_handler(event, context):
    import random
    
    max = int(event['queryStringParameters']['Max'])
    ranNum = random.randint(1, max)
    return {
        'statusCode': 200,
        'body': json.dumps({
            "Max":max,
            "randomNum" : ranNum
        })
    }

수정 완료 후 deploy 클릭

런타임 설정 -> 핸들러 -> 편집
randomNum_function.randomNum_handler

구성 항목을 클릭한 후, randomNum-API 링크를 클릭하여 API Gateway 콘솔로 이동

오른쪽 창에 메서드 요청 클릭 -> 
요청 검사기 옆에 연필 아이콘 클릭 ->
본문, 쿼리 문자열 파라미터 및 헤더 검사로 변경 ->
URL 쿼리 문자열 파라미터 옆 작은 삼각형 클릭해서 확장.
쿼리 문자열 추가 -> Max 필수 ->
상단에 메서드 실행 눌러서 이동..

테스트를 클릭..

메서드를 GET으로 변경 -> 쿼리 문자열에 Max=10 입력.

테스트 버튼 클릭..

테스트 성공 후 postman 열고 lambda 함수 API 엔드포인트 복사 한 후에 테스트….

API 엔드포인트: https://y2om6vzq57.execute-api.ap-northeast-2.amazonaws.com/default/randomNum


 
## AWS_Serverless

# ssh awsu

# cd /

# git clone http://github.com/impelfin/allnew

# git config user.name "impelfin"

# git config user.email "impelfin@gmail.com"

# mkdir /allnew/node/serverless

# npm install -g serverless

# sls —version

 # sls login
? Which would you like to log into?
❯ Serverless Framework Dashboard
  Serverless Console

https://app.serverless.com?client=cli&transactionId=Q6E3YceEGR9yM-d87nEnI

continue to dashboard… 

github 계정으로 loggin.

✔ You are now logged into the Serverless Dashboard


## AWS에서 권한 설정

IAM -> 사용자 -> 사용자 추가




보안 자격 증명


# serverless config credentials --provider aws --key {액세스 키 ID} --secret {비밀 액세스 키}


## Serverless 템플릿을 활용해 어플리케이션 생성하기

# sls create -t {원하는 템플릿} -p {원하는 프로젝트 이름}

# sls create -t aws-nodejs -p BlogTest

✔ Project successfully created in "BlogTest" from "aws-nodejs" template (4s)

해당 디렉토리로 이동하면 다음과 같은 파일이 존재.

# cd BlogTest

## handler.js

'use strict';

module.exports.hello = async (event) => {
  return {
    statusCode: 200,
    body: JSON.stringify(
      {
        message: 'Go Serverless v1.0! Your function executed successfully!',
        input: event,
      },
      null,
      2
    ),
  };

  // Use this code if you don't use the http event with the LAMBDA-PROXY integration
  // return { message: 'Go Serverless v1.0! Your function executed successfully!', event };
};

## 배포 전에 테스트하기

# sls invoke local --function hello

{
    "statusCode": 200,
    "body": "{\n  \"message\": \"Go Serverless v1.0! Your function executed successfully!\",\n  \"input\": \"\"\n}"
}


## serverless.yml 설정
service: blogtest

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: ap-northeast-2
functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get

# sls deploy

Deploying blogtest to stage dev (ap-northeast-2)

✔ Service deployed to stack blogtest-dev (106s)

endpoint: GET - https://mafwz5adud.execute-api.ap-northeast-2.amazonaws.com/dev/hello
functions:
  hello: blogtest-dev-hello (392 B)

browser :

https://mafwz5adud.execute-api.ap-northeast-2.amazonaws.com/dev/hello




# sls remove

Removing blogtest from stage dev (ap-northeast-2)

✔ Service blogtest has been successfully removed (31s)



### cloud9

# apt -y update

# apt -y upgrade

# apt install -y python3-pip

# apt -y install python2.7

# dd if=/dev/zero of=/data/swapfile bs=1M count=3000

# mkswap /data/swapfile

# chmod 600 /data/swapfile

# swapon /data/swapfile

# free

# vi /etc/fstab

  4 /data/swapfile  swap    swap    defaults        0       0



## AWS Cloud9 메뉴 진입 -> Create Environment -> 

이름 : moon_cloud9 

환경 유형 : 기존 컴퓨팅

기존 컴퓨팅

Copy Key to clipboard 클릭


## awsu…..

# vi ~/.ssh/authorized_keys

마지막 줄에 추가

User : root

Host : 13.124.4.168

추가 세부 정보 - 선택 사항

# which node

환경 경로:
/allnew

Node.js 바이너리로 가는 경로 : 
/root/.nvm/versions/node/v18.16.0/bin/node

ssh 점프 호스트 :
root@13.124.4.168:22

생성 클릭

-> 생성된 Environments에서 moon -> Open in Cloud9 

창이 열리면 Next -> Next -> Next -> Finish..






