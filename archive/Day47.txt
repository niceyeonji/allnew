Day-47

### folium

# pip uninstall urllib3

# pip install urllib3=1.26.15

# pip install mysql@5.7

# pip install folium 


## p407_foliumTest.py

import folium

latitude = 37.566345
longitude = 126.977893

map_osm = folium.Map(location=[latitude, longitude])
map_osm.save('./xx_map1.html')
print(type(map_osm))

map_osm = folium.Map(location=[latitude, longitude], zoom_start=16)
map_osm.save('./xx_map2.html')

map_osm = folium.Map(location=[latitude, longitude], zoom_start=17, tiles='Stamen Terrain')
map_osm.save('./xx_map3.html')

map_osm = folium.Map(location=[latitude, longitude])
folium.Marker([latitude, longitude], popup='서울특별시청').add_to(map_osm)
map_osm.save('./xx_map4.html')

map_osm = folium.Map(location=[latitude, longitude], zoom_start=17)
folium.Marker([latitude, longitude], popup='서울특별시청', icon=folium.Icon(color='red', icon='info-sign')).add_to(map_osm)

folium.CircleMarker([37.5658859, 126.9754788], radius=150, color='blue', fill_color='red', fill=False, popup='덕수궁').add_to(map_osm)
map_osm.save('./xx_map5.html')
print('file saved...')


### geocoding

https://developers.kakao.com


## p413_getGeocoding.py

import json
import os.path
import folium, requests

address = '서울 마포구 신수동 451번지 세양청마루아파트 상가 101호'
url = 'https://dapi.kakao.com/v2/local/search/address.json?query=' + address

BASE_DIR = os.path.dirname(os.path.dirname(os.path.relpath("./")))
secret_file = os.path.join(BASE_DIR, 'secret.json')

with open(secret_file) as f:
    secrets = json.loads(f.read())

def get_secret(setting, secrets=secrets):
    try:
        return secrets[setting]
    except KeyError:
        errorMsg = "Set the {} environment variable.".format(setting)
        return errorMsg

header = {'Authorization': 'KakaoAK ' + get_secret("kakao_apiKey")}

def getGeocoder(address):
    result = ""
    r = requests.get(url, headers=header)

    if r.status_code == 200:
        try:
            result_address = r.json()["documents"][0]["address"]
            result = result_address["y"], result_address["x"]
        except Exception as err:
            return None
    else:
        result = "ERROR[" + str(r.status_code) + "]"

    return result

address_latlng = getGeocoder(address)
latitude = address_latlng[0]
longitude = address_latlng[1]

print('주소지 :', address)
print('위도 :', latitude)
print('경도 :', longitude)

shopinfo = '교촌 신수점'
foli_map = folium.Map(location=[latitude, longitude], zoom_start=17)
myicon = folium.Icon(color='red', icon='info-sign')
folium.Marker([latitude, longitude], popup=shopinfo, icon=myicon).add_to(foli_map)

folium.CircleMarker([latitude, longitude], radius=300, color='blue', fill_color='red', fill=False, popup=shopinfo).add_to(foli_map)

foli_map.save('./xx_shopmap.html')
print('file saved...')


## p415_getGeocoding.py

import json
import os.path
import folium, requests
import pandas as pd

url_header = 'https://dapi.kakao.com/v2/local/search/address.json?query='

BASE_DIR = os.path.dirname(os.path.dirname(os.path.relpath("./")))
secret_file = os.path.join(BASE_DIR, 'secret.json')

with open(secret_file) as f:
    secrets = json.loads(f.read())

def get_secret(setting, secrets=secrets):
    try:
        return secrets[setting]
    except KeyError:
        errorMsg = "Set the {} environment variable.".format(setting)
        return errorMsg

header = {'Authorization': 'KakaoAK ' + get_secret("kakao_apiKey")}

def getGeocoder(address):
    result = ""
    url = url_header + address
    r = requests.get(url, headers=header)

    if r.status_code == 200:
        try:
            result_address = r.json()["documents"][0]["address"]
            result = result_address["y"], result_address["x"]
        except Exception as err:
            return None
    else:
        result = "ERROR[" + str(r.status_code) + "]"

    return result

def makeMap(brand, store, getInfo):
    shopinfo = store + '(' + brand_dict[brand] + ')'
    mycolor = brand_color[brand]
    latitude, longitude = float(getInfo[0]), float(getInfo[1])

    marker = folium.Marker([latitude, longitude], popup=shopinfo, icon=folium.Icon(color=mycolor, icon='info-sign')).add_to((mapObject))

mylatitude = 37.4946203470469
mylongitude = 127.027606136235
mapObject = folium.Map(location=[mylatitude, mylongitude], zoom_start=13)

brand_dict = {'cheogajip' : '처가집', 'pelicana' : '페리카나'}
brand_color = {'cheogajip' : 'red', 'pelicana' : 'blue'}

csvfile = 'ChickenResult.csv'
myframe = pd.read_csv(csvfile, index_col=0, encoding='utf-8')

where = '강남구'
brandName = 'cheogajip'
condition1 = myframe['gungu'] == where
condition2 = myframe['brand'] == brandName
mapData01 = myframe.loc[condition1 & condition2]

brandName = 'pelicana'
condition1 = myframe['gungu'] == where
condition2 = myframe['brand'] == brandName
mapData02 = myframe.loc[condition1 & condition2]

mylist = []
mylist.append(mapData01)
mylist.append(mapData02)

mapData = pd.concat(mylist, axis=0)

ok = 0
notok = 0
for idx in range(len(mapData.index)):
    brand = mapData.iloc[idx]['brand']
    store = mapData.iloc[idx]['store']
    address = mapData.iloc[idx]['address']
    getInfo = getGeocoder(address)

    if getInfo == None:
        print("Not OK : " + address)
        notok += 1
    else:
        print("OK : " + address)
        ok += 1
        makeMap(brand, store, getInfo)
    print('%' * 40)

total = ok + notok
print('ok : ', ok)
print('Not ok : ', notok)
print('total : ', total)

filename = 'xx_chickenMap.html'
mapObject.save(filename)
print('file saved...')


## p423_chickenResult.py

import pandas as pd
import matplotlib.pyplot as plt

plt.rcParams['font.family'] = 'AppleGothic'

chickenfile = 'chicken.csv'
colnames = ['지역','브랜드','매장수']
myframe = pd.read_csv(chickenfile, names=colnames, header=None)
print(myframe)
print('-' * 40)

mygrouping = myframe.groupby('브랜드')['매장수']
meanSeries = mygrouping.sum()
meanSeries.index.name = '브랜드'
print(meanSeries)
print('-' * 40)

mycolor = ['red', 'green','blue']
mytitle = '브랜드별 매장 개수'
myylim = [0, meanSeries.max() + 5]
myalpha = 0.7

meanSeries.plot(kind='bar', color=mycolor, title=mytitle, legend=False, rot=15, ylim=myylim, grid=False, alpha=myalpha)

fliename = 'xx_chick.png'
plt.savefig(fliename, dpi=400, bbox_inches='tight')
plt.show()

print('finished.')


# pip install wordcloud


####  wordcloud 설치 안되는 경우 (M1 Mac) 

https://github.com/TA-Lib/ta-lib-python/issues/566


## p434_wordCloud.py

import matplotlib.pyplot as plt
from wordcloud import WordCloud

plt.rcParams['font.family'] = 'AppleGothic'

filename = 'steve.txt'
myfile = open(filename, 'rt', encoding='utf-8')

text = myfile.read()

wordcloud = WordCloud()
wordcloud = wordcloud.generate(text)
print(type(wordcloud))
print('-' * 40)

bindo = wordcloud.words_
print(type(bindo))
print('-' * 40)

sortedData = sorted(bindo.items(), key=lambda x : x[1], reverse=True)
print(sortedData)
print('-' * 40)

chartData = sortedData[0:10]
print(chartData)
print('-' * 40)

xtick = []
chart = []
for item in chartData:
    xtick.append(item[0])
    chart.append(item[1])

mycolor = ['r', 'g', 'b', 'y', 'm', 'c', '#FFF0F0', '#CCFFBB', '#05CCFF', '#11CCFF']
plt.bar(xtick, chart, color=mycolor)
plt.title('상위 빈도 Top 10')
filename = 'wordCloudEx01_01.png'
plt.savefig(filename, dpi=400, bbox_inches='tight')
print(filename + ' file saved...')

plt.figure(figsize=(12, 12))
plt.imshow(wordcloud)
plt.axis('off')

filename = 'wordCloudEx01_02.png'
plt.savefig(filename, dpi=400, bbox_inches='tight')
print(filename + ' file saved...')


## p443_aliceSteve.py

import numpy as np
import matplotlib.pyplot as plt

from PIL import Image
from wordcloud import WordCloud
from wordcloud import STOPWORDS
from wordcloud import ImageColorGenerator

image_file = 'alice.png'

img_file = Image.open(image_file)
print(type(img_file))
print('-' * 40)

alice_mask = np.array(img_file)
print(type(alice_mask))
print('-' * 40)

plt.figure(figsize=(8,8))
plt.imshow(alice_mask, interpolation='bilinear')
plt.axis('off')

filename = 'alice_graph01.png'
plt.savefig(filename, dpi=400, bbox_inches='tight')
print(filename + ' file saved..')

mystopwords = set(STOPWORDS)
mystopwords.add('said')
mystopwords.update(['hohoho','hahaha'])

print(len(mystopwords))
print(mystopwords)

wc = WordCloud(background_color='white', max_words=2000, mask=alice_mask, stopwords=mystopwords)

stevefile = 'steve.txt'
text = open(stevefile, 'rt', encoding='utf-8')
text = text.read()

wc = wc.generate(text)
print(wc.words_)

plt.figure(figsize=(12, 12))
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')

filename = 'alice_graph02.png'
plt.savefig(filename, dpi=400, bbox_inches='tight')
print(filename + ' file saved..')

alice_color_file = 'alice_color.png'
alice_color_mask = np.array((Image.open(alice_color_file)))

wc = WordCloud(background_color='white', max_words=2000, mask=alice_color_mask, stopwords=mystopwords, max_font_size=40, random_state=42)
wc = wc.generate(text)

plt.figure(figsize=(12, 12))
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')

filename = 'alice_graph03.png'
plt.savefig(filename, dpi=400, bbox_inches='tight')
print(filename + ' file saved..')

plt.figure(figsize=(12, 12))
plt.imshow(alice_color_mask, interpolation='bilinear')
plt.axis('off')

filename = 'alice_graph04.png'
plt.savefig(filename, dpi=400, bbox_inches='tight')
print(filename + ' file saved..')

image_colors = ImageColorGenerator(alice_color_mask)

plt.figure(figsize=(12, 12))
newwc = wc.recolor(color_func=image_colors, random_state=42)
plt.imshow(newwc, interpolation='bilinear')
plt.axis('off')

filename = 'alice_graph05.png'
plt.savefig(filename, dpi=400, bbox_inches='tight')
print(filename + ' file saved..')

print('finished..')


### 텍스트 마이닝

# pip install konlpy

# pip install JPype1


## p455_konlpy.py

from konlpy.tag import Komoran

sentence = '코로나 바이러스 태블릿 PC, 설진욱, 가나다라'
print('# before user dic')
komo = Komoran()
print(komo.pos(sentence))
print('-' * 40)

komo = Komoran(userdic='user_dic.txt')
print('# after user dic')
print(komo.pos(sentence))
print('-' * 40)

print('# komo.nouns')
result = komo.nouns(sentence)
print(result)
print('-' * 40)

print('# komo.morphs')
result = komo.morphs(sentence)
print(result)
print('-' * 40)



# pip install nltk

## p457_presidentFrequency.py

import nltk
import matplotlib.pyplot as plt
import numpy as np

from wordcloud import WordCloud
from PIL import Image
from konlpy.tag import Komoran

plt.rc('font', family="AppleGothic")

class Visualization:
    def __init__(self, wordList):
        self.wordList = wordList
        self.wordDict = dict(wordList)

    def makeWordCloud(self):
        alice_color_file = 'alice_color.png'
        alice_coloring = np.array(Image.open(alice_color_file))

        fontpath = "AppleGothic.ttf"
        wordcloud = WordCloud(font_path=fontpath, mask=alice_coloring, relative_scaling=0.2, background_color='lightyellow')
        print(self.wordList)
        wordcloud = wordcloud.generate_from_frequencies(self.wordDict)

        plt.imshow(wordcloud)
        plt.axis('off')

        filename = 'xx_myWordCloud.png'
        plt.savefig(filename, dpi=400, bbox_inches='tight')
        print(filename + ' file saved..')

        plt.figure(figsize=(16,8))

    def makeBarChart(self):
        barcount = 10
        xlow, xhigh = -0.5, barcount - 0.5

        result =  self.wordList[:barcount]
        chartdata = []
        xdata = []
        mycolor = ['r', 'g', 'b', 'y', 'm', 'c', '#FFF0F0', '#CCFFBB', '#05CCFF', '#11CCFF']

        for idx in range(len(result)):
            chartdata.append(result[idx][1])
            xdata.append(result[idx][0])

            value = str(chartdata[idx]) + '건'
            plt.text(x=idx, y=chartdata[idx] - 5, s=value, fontsize=8, horizontalalignment='center')

        plt.xticks(range(barcount), xdata, rotation=45)
        plt.bar(range(barcount), chartdata, align='center', color=mycolor)

        plt.title('상위 ' + str(barcount) + '빈도수')
        plt.xlim([xlow, xhigh])
        plt.xlabel('주요 키워드')
        plt.ylabel('빈도수')

        filename = 'myBarChart.png'
        plt.savefig(filename, dpi=400, bbox_inches='tight')
        print(filename + ' file saved..')

filename = '문재인대통령신년사.txt'
ko_con_text = open(filename, encoding='utf-8').read()
print(type(ko_con_text))
print('-' * 40)

komo = Komoran(userdic='user_dic.txt')
token_ko = komo.nouns(ko_con_text)
stop_word_file = 'stopword.txt'
stop_file = open(stop_word_file, 'rt', encoding='utf-8')
stop_words = [ word.strip() for word in stop_file.readlines()]

tokens_ko = [each_word for each_word in token_ko if each_word not in stop_words]

ko = nltk.Text(tokens=tokens_ko)

print(type(ko))
print(type(ko.vocab()))
print(type(ko.vocab().most_common(50)))

data = ko.vocab().most_common(500)
wordlist = list()

for word, count in data:
    if (count >= 1 and len(word) >= 2):
        wordlist.append((word, count))

print(wordlist)
visual = Visualization(wordlist)
visual.makeWordCloud()
visual.makeBarChart()

print('finished')



