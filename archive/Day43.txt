Day-43

# pip install numpy

# pip install —upgrade pip


## p105_makeArray.py

import numpy as np

print(np.zeros(3))

arrZeros = np.zeros((2,  2))
print(arrZeros)

array2 = np.ones((3, 2))
print(array2)




## p110_numpyEx02.py

import numpy as np

a = np.array([-1, 3, 2, -6])
b = np.array([3, 6, 1, 2])
A = np.reshape(a, [2, 2])
B = np.reshape(b, [2, 2])
print("\nsol1")
print(A)
print("\nsol2")
print(B)

result3_1 = np.matmul(A, B)
result3_2 = np.matmul(B, A)
print("\nsol3-1")
print(result3_1)
print("\nsol3-2")
print(result3_2)

a = np.reshape(a, [1, 4])
b = np.reshape(b, [1, 4])
b2 = np.transpose(b)
print("\nsol4-1")
print(b2)

result4 = np.matmul(a, b2)
print("\nsol4-2")
print(result4)



## p112_arrayManipulation.py

import numpy as np

print('\nnp.repeat function')
su1 = 2
rep_cnt1 = 5
result = np.repeat(su1, rep_cnt1)
print(type(result))
print(result)

array1 = np.array([1, 2])
array2 = np.array([3, 4])
print('\narray1')
print(array1)
print('\narray2')
print(array2)

print('\nnp.concatenate function')
result = np.concatenate((array1, array2))
print(result)

su2 = 3
rep_cnt2 = 4
print('\nfunction repeat')
abcd = np.repeat(su1, rep_cnt1)
defg = np.repeat(su2, rep_cnt2)
result = np.concatenate((abcd, defg))
print(result)

array3 = np.array([1, 2, 3, 4, 5, 6])
print('\nreshape function')

print('2row 3col')
result = np.reshape(array3, [2, 3])
print(result)

print('3row 2col')
result = np.reshape(array3, [3, 2])
print(result)

array4 = np.array([[3, 6, 2], [4, 1, 5]])
print('\narray4')
print(array4)

print('\ntransposed array')
result = np.transpose(array4)
print(result)


### p117_universal_function.py

import numpy as np

array = np.array([1.57, 2.48, 3.93, 4.33])
print('\narray print')
print(array)

print('\nnp.ceil() function')
result = np.ceil(array)
print(result)

print('\nnp.floor() function')
result = np.floor(array)
print(result)

print('\nnp.round() function')
result = np.round(array)
print(result)

print('\n1 decimal place round')
result = np.round(array, 1)
print(result)

print('\nsqrt() function')
result = np.sqrt(array)
print(result)

arr = np.arange(10)
print(arr)
print()

print('\nexp() function')
result = np.exp(arr)
print(result)

x = [5, 4]
y = [6, 3]

print('\nnp.maximum(x, y')
result = np.maximum(x, y)
print(result)

print('-' * 30)

array1 = np.array([-1.1, 2.2, 3.3, 4.4])
print('\narray1')
print(array1)

array2 = np.array([1.1, 2.2, 3.3, 4.4])
print('\narray2')
print(array2)

print('\nabs() function')
result = np.abs(array1)
print(result)

print('\nsum() function')
result = np.sum(array1)
print(result)

print('\ncompare')
result = np.equal(array1, array2)
print(result)

print('\nnp.sum() and np.equal')
print('\nTure is 1, False is 0 counting.')
result = np.sum(np.equal(array1, array2))
print(result)

print('\naverage')
result = np.mean(array2)
print(result)

arrX = np.array([[1, 2], [3, 4]], dtype=np.float64)
arrY = np.array([[5, 6], [7, 8]], dtype=np.float64)

print('\nadd of element by element')
print(arrX + arrY)
print(np.add(arrX, arrY))

print('\nsub of element by element')
print(arrX - arrY)
print(np.subtract(arrX, arrY))

print('\nmul of element by element')
print(arrX * arrY)
print(np.multiply(arrX, arrY))

print('\ndiv of element by element')
print(arrX / arrY)
print(np.divide(arrX, arrY))

print('\nsqrt of element by element')
print(np.sqrt(arrX))


# pip install pandas

## p123_makeSeries.py

from pandas import Series
import numpy as np

mylist = [10, 40, 30]
myindex = ['김유신', '이순신', '강감찬']

print('\n#Cast 01')
myseries = Series(mylist)
print(myseries)

print('\n#Cast 02')
myseries = Series(data=mylist)
print(myseries)

print('\n#Cast 03')
myseries = Series(data=mylist, index=myindex)
print(myseries)

print('\n#Cast 04')
myseries = Series(data=mylist, index=myindex, dtype=float)
print(myseries)


## p127_SeriesTest01.py

from pandas import Series

mylist = [10, 40, 30, 20]
myseries = Series(data=mylist, index= ['김유신', '이순신', '강감찬', '광해군'])

print('\nData Type')
print(type(myseries))

myseries.index.name = '점수'
print('\nindex name of series')
print(myseries.index.name)

myseries.name = '학생들 시험'
print('\nname of series')
print(myseries.name)

print('\nname of index')
print(myseries.index)

print('\nvalue of series')
print(myseries.values)

print('\nprint information of series')
print(myseries)

print('\nrepeat print')
for idx in myseries.index:
    print('Index : ' + idx + ', Values : ' + str(myseries[idx]))


## p132_seriesReadWrite10.py

from pandas import Series

myindex = ['용산구', '마포구', '영등포구', '서대문구', '광진구', '은평구','서초구']
mylist = [50, 60 , 40, 80, 70, 30, 20]
myseries = Series(data=mylist, index=myindex)
print(myseries)

print('\nread value')
print(myseries[['서대문구']])

print('\nslicing label name')
print(myseries['서대문구':'은평구'])

print('\ndata read')
print(myseries[['서대문구','서초구']])

print('\nread index')
print(myseries[[2]])

print('\nread index 0, 2, 4')
print(myseries[0:5:2])

print('\nread index 1, 3, 5')
print(myseries[[1, 3, 5]])

print('\nslicing')
print(myseries[3:6])

myseries[2] = 90
myseries[2:5] = 33
myseries[['용산구', '서대문구']] = 55
myseries[0::2] = 80
print('\nSeries list')
print(myseries)


## p138_seriesArithmetic.py

from pandas import Series, DataFrame

myindex1 = ['강호민', '유재준', '김제명', '신동진']
mylist1 = [30, 40, 50, 60]

myindex2 = ['강호민', '유재준', '김제명', '이수진']
mylist2 = [20, 40, 60, 70]

myseries1 = Series(data=mylist1, index=myindex1)
myseries2 = Series(data=mylist2, index=myindex2)

print('\n# data of series1')
print(myseries1)

print('\n# data of series2')
print(myseries2)

# arithmetic
print(myseries1 + 5)
print('-' * 50)

print(myseries1.add(5))
print('-' * 50)

print(myseries1 - 10)
print('-' * 50)

print(myseries1 * 2)
print('-' * 50)

print(myseries1 / 3)
print('-' * 50)

# relation operation
print(myseries1 >= 40)
print('-' * 50)

print('\nadd of series(if nodata then NaN)')
newseries = myseries1 + myseries2
print(newseries)

print('\nsub of series(operation after fill value 0)')
newseries = myseries1.sub(myseries2, fill_value = 0)
print(newseries)


## p144_uniqueAndCount.py

from pandas import Series

print('\nunique, count, isin')
mylist = ['라일락','코스모스','코스모스','백일홍','코스모스','코스모스','들장미','들장미','라일락','라일락']
myseries = Series(mylist)

print('\nunique()')
myunique = myseries.unique() 
print(myunique)

print('\nvalue_count()')
print(myseries.value_counts())

print('\nisin()')
mask = myseries.isin(['들장미', '라일락'])
print(mask)
print('-' * 50)

print(myseries[mask])
print('-' * 50)

print('\nfinished')


## p150_makeDataframe.py

from pandas import DataFrame as df
import numpy as np

mydata = np.arange(9).reshape((3, 3))
myframe = df(data=mydata, index=['용산구','마포구','은평구'], columns=['김철수','이영희','정준수'])
print(myframe)
print('-' * 50)

sdata = {'지역' : ['용산구','마포구'], '연도' : [2019, 2020]}
myframe = df(data=sdata)
print(myframe)
print('-' * 50)

sdata = {'용산구' : {2020:10, 2021:20}, '마포구' : {2020:30, 2021:40, 2022:50}}
myframe = df(data=sdata)
print(myframe)
print('-' * 50)

sdata = {'지역' : ['용산구','마포구','용산구', '마포구','마포구'], '연도' : [2019, 2020, 2021, 2020, 2021], '실적' : [20, 30, 35, 25, 45]}
myframe = df(data=sdata)
print(myframe)
print('-' * 50)


## p155_DataFrame.py

from pandas import DataFrame

sdata = {
    '도시' : ['서울','서울','서울','부산','부산'],
    '연도' : [2000, 2001, 2002, 2001, 2002],
    '실적' : [150, 170, 360, 240, 290]
}

myindex = ['one', 'two', 'three', 'four', 'five']
myframe = DataFrame(sdata, index=myindex)
print('\nType : ', type(myframe))

myframe.columns.name = 'Columns1'
print('\nColumns Information')
print(myframe.columns)

myframe.index.name = 'Index1'
print('\nIndex Information')
print(myframe.index)
print('\ninner data Information')
print(type(myframe.values))
print(myframe.values)

print('\nData Type Information')
print(myframe.dtypes)

print('\nContext Information')
print(myframe)

print('\nrow, col transform')
print(myframe.T)

print('\ncolumns property usage')
mycolumns = ['연도', '도시', '실적']
newframe = DataFrame(sdata, columns=mycolumns, index=myindex)
print(newframe)


## p161_Dataframe_readWrite.py

import numpy as np
from pandas import DataFrame

myindex = ['이순신','김유신','강감찬','광해군','연산군']
mycolumns = ['서울','부산','광주','목포','경주']
mylist = list(10 * onedata for onedata in range(1, 26))
print(mylist)

myframe = DataFrame(np.reshape(mylist, (5, 5)),
                    index=myindex, columns=mycolumns)
print(myframe)

print('\n1 row data read of series')
result = myframe.iloc[1]
print(type(result))
print(result)

print('\nmulti row data read of series')
result = myframe.iloc[[1, 3]]
print(type(result))
print(result)

print('\neven row data read of series')
result = myframe.iloc[0::2]
print(type(result))
print(result)

print('\nodd row data read of series')
result = myframe.iloc[1::2]
print(type(result))
print(result)

print('\n김유신 included row data read of series')
result = myframe.loc['김유신']
print(type(result))
print(result)

print('\n김유신 included row data read of Dataframe')
result = myframe.loc[['김유신']]
print(type(result))
print(result)

print('\n이순신, 강감찬 included row data read of Dataframe')
result = myframe.loc[['이순신', '강감찬']]
print(type(result))
print(result)

print(myframe.index)
print('-' * 50)

print('\n이순신, 광주 실적 included row data read of Dataframe')
result = myframe.loc[['이순신'], ['광주']]
print(type(result))
print(result)

print('\n연산군, 강감찬 / 광주, 목포 실적 included row data read of Dataframe')
result = myframe.loc[['연산군', '강감찬'], ['광주', '목포']]
print(type(result))
print(result)

print('\n이순신 ~ 강감찬 / 서울 ~ 목포 실적 included row data read of Dataframe')
result = myframe.loc['이순신':'강감찬', '서울':'목포']
print(type(result))
print(result)

print('\n김유신 ~ 광해군 / 부산 실적 included row data read of Dataframe')
result = myframe.loc['김유신':'광해군', ['부산']]
print(type(result))
print(result)

print('\nBoolean Data process')
result = myframe.loc[[False, True, True, False, True]]
print(result)

print('\n부산 실적 <= 100')
result = myframe.loc[myframe['부산'] <= 100]
print(result)

print('\n목포 실적 == 140')
result = myframe.loc[myframe['목포'] == 140]
print(result)

cond1 = myframe['부산'] >= 70
cond2 = myframe['목포'] >= 140

print(type(cond1))
print('-' * 40)

df = DataFrame([cond1, cond2])
print(df)
print('-' * 40)

print(df.all())
print('-' * 40)

print(df.any())
print('-' * 40)

result = myframe.loc[df.all()]
print(result)
print('-' * 40)

result = myframe.loc[df.any()]
print(result)
print('-' * 40)

print('\nlambda function')
result = myframe.loc[lambda df : df['광주'] >= 130]
print(result)

print('\ndata set 30 : 이순신, 강감찬 부산 실적')
myframe.loc[['이순신', '강감찬'], ['부산']] = 30
print(myframe)

print('\ndata set 80 : 김유신 ~ 광해군 경주 실적')
myframe.loc['김유신':'광해군', ['경주']] = 80
print(myframe)

print('\ndata set 50 : 연산군 모든 실적')
myframe.loc[['연산군'], :] = 50
print(myframe)

print('\ndata set 60 : 모든 사람의 광주 실적')
myframe.loc[:, ['광주']] = 60
print(myframe)
print('-' * 40)

print('\ndata set 0 : 경주 실적 <= 60인 사람의 경주, 광주 실적')
myframe.loc[myframe['경주'] <= 60, ['경주', '광주']] = 0
print(myframe)



## p191_Dataframe_arithmetic.py

import numpy as np
from pandas import Series, DataFrame

myindex = ['강호민', '유재준', '신동진']
mylist = [30, 40, 50]

myseries = Series(data=mylist, index=myindex)
print('\nSeries print')
print(myseries)

myindex = ['강호민', '유재준', '이수진']
mycolumns = ['서울', '부산', '경주']
mylist = list(10 * onedata for onedata in range(1, 10))

myframe = DataFrame(np.reshape(np.array(mylist), (3, 3)), index = myindex, columns = mycolumns)
print('\nDataFrame print')
print(myframe)

print('\nDataFrame + Series')
result = myframe.add(myseries, axis = 0)
print(result)

myindex2 = ['강호민', '유재준', '김병준']
mycolumns2 = ['서울', '부산', '대구']
mylist2 = list(5 * onedata for onedata in range(1, 10))

myframe2 = DataFrame(np.reshape(np.array(mylist2), (3, 3)),
                     index=myindex2, columns=mycolumns2)
print('\nDataFrame print')
print(myframe2)

print('\nDataFrame + DataFrame')
result = myframe.add(myframe2, fill_value = 0)
print(result)


## p198_GetMemberInfo.py

import pandas as pd

filename = 'memberInfo.csv'
df = pd.read_csv(filename)
print(df)

newdf01 = df.set_index(keys=['id'])
print(newdf01)

newdf02 = df.set_index(keys=['id'], drop=False)
print(newdf02)

df02 = pd.read_csv(filename, index_col='id')
print(df02)


## p203_makeCsv.py

import random
import pandas as pd

result = []
myColumns = ('번호', '이름', '나이')
myencoding = 'utf-8'

for idx in range(1, 3):
    sublist = []
    sublist.append(100 * idx)
    sublist.append('김철수' + str(idx))
    sublist.append((random.randint(1, 10)))
    result.append(sublist)

myframe = pd.DataFrame(result, columns=myColumns)

filename = 'csv_01_01.csv'
myframe.to_csv(filename, encoding=myencoding, mode='w', index=True)

filename = 'csv_01_02.csv'
myframe.to_csv(filename, encoding=myencoding, mode='w', index=False)

filename = 'csv_01_03.csv'
myframe.to_csv(filename, encoding=myencoding, mode='w', index=False, header=False)

filename = 'csv_01_04.csv'
myframe.to_csv(filename, encoding=myencoding, mode='w', index=False, sep="%")

print(filename + '파일 저장 완료')














