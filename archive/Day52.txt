Day-52

## 기존 인스턴스 종료 후 재 시작하는 방법(pem key 분실시)

인스턴스 시작 -> 이름 지정 : aws_centos -> 내 AMI 선택 : aws _centos_img

-> 새 키페어 생성 -> 보안 그룹 - 기존 보안 그룹 선택 : aws_group -> 인스턴스 시작

# mkdir ~/aws

# cd ~/aws

# mv ~/Downloads/new_aws_moon.pem .


인스턴스 시작 -> 이름 지정 : aws_ubuntu -> 내 AMI 선택 : aws _ubuntu_img

-> 기존 키 페어 선택 : new_aws_moon > 보안 그룹 - 기존 보안 그룹 선택 : aws_group -> 인스턴스 시작


## 탄력적 IP 재 연결..

43.201.233.18

13.124.4.168


## .ssh/config

# aws ec2 centos
	Host awsc
	HostName 43.201.233.18
	User root
 	IdentityFile ~/.ssh/new_aws_moon.pem
 
# aws ec2 ubuntu
	Host awsu
 	HostName 13.124.4.168
 	User root
	IdentityFile ~/.ssh/new_aws_moon.pem


# cp ~/aws/new_aws_moon.pem .

# chmod 600 ~/aws/new_aws_moon.pem

# chmod 600 ~/.ssh/new_aws_moon.pem

# ssh -i ~/.ssh/new_aws_moon.pem ec2-user@awsc

$ su -

# vi .ssh/authorized_keys

# exit

$ exit

# ssh awsc

# exit


# ssh -i ~/.ssh/new_aws_moon.pem ubuntu@awsu

$ su -

# vi .ssh/authorized_keys

# exit

$ exit

# ssh awsu

# exit


# scp -i ~/.ssh/new_aws_moon.pem new_aws_moon.pem root@awsc:/root

# scp -i ~/.ssh/new_aws_moon.pem config root@awsc:/root

# scp -i ~/.ssh/new_aws_moon.pem new_aws_moon.pem root@awsu:/root

# scp -i ~/.ssh/new_aws_moon.pem config root@awsu:/root



## 각각 awsc와 awsu에서…

# mv new_aws_moon.pem .ssh

# mv config .ssh

# vi .ssh/config
  1 # aws ec2 centos
  2 Host awsc
  3         HostName 43.201.233.18
  4         User root
  5         IdentityFile ~/.ssh/new_aws_moon.pem
  6
  7 # aws ec2 ubuntu
  8 Host awsu
  9         HostName 13.124.4.168
 10         User root
 11         IdentityFile ~/.ssh/new_aws_moon.pem
 12
 13 # aws Lightsail nodejs-1
 14 Host bit
 15         HostName 3.37.42.249
 16         User root
 17         IdentityFile ~/.ssh/LightsailDefaultKey-ap-northeast-2.pem


# ssh awsc

# exit

# ssh awsu

# exit


### AWS EC2 NGINX - awsc

# yum -y update

# yum -y install nginx

# systemctl start nginx

# systemctl status nginx

# systemctl enable nginx

# netstat -nltp

# cd /usr/share/nginx/html

# exit

http://43.201.233.18



### AWS EC2 NGINX - awsu

# ssh awsu

# apt -y update; apt -y upgrade

핑크 화면 뜨면…
tab -> ok -> <enter>

# apt -y autoremove

# apt -y install nginx

# systemctl start nginx

# systemctl status nginx

# systemctl enable nginx

# apt -y install net-tools

# netstat -nltp

# cd /usr/share/nginx/html

# exit

http://13.124.4.168/


### aws-amazon EC2 -> 이미지 -> AMI -> 작업 -> AMI 등록 취소


### aws-amazon EC2 -> 인스턴스 -> 작업 -> 이미지 및 템플릿 -> 이미지 생성 -> 이미지 이름 기입 -> 이미지 생성

aws_centos_img

aws_ubuntu_img


### aws-amazon EC2 -> 이미지 -> AMI -> 이미지 선택 -> AMI 권한 편집 -> AMI 가용성 퍼블릭으로 선택 -> 변경 사항 저장




### AWS EC2 mysql-server - awsu

# apt -y update; apt -y upgrade

# apt -y install mysql-server

# systemctl restart mysql

# systemctl status mysql

# systemctl enable mysql

# netstat -ntlp

# vi /etc/mysql/mysql.conf.d/mysqld.cnf

 31 bind-address            = 0.0.0.0
 32 mysqlx-bind-address     = 0.0.0.0

# systemctl restart mysql

# netstat -ntlp

# mysql -u root -p
Enter password: 1234

mysql> create user 'mysql'@'%' identified by '1234';

mysql> create database testdb;

mysql> show databases;

mysql> grant all privileges on testdb.* to 'mysql'@'%';

mysql> flush privileges;

mysql> show grants for 'mysql'@'%';

mysql> use mysql

mysql> alter user mysql identified with mysql_native_password by '1234';

mysql> exit

connection Name : AWS EC2 Ubuntu
Hostname : IP
Username : mysql
store in Keychain : 1234


## testdb_stinfo-stgrade_create.sql

drop database testdb;
create database testdb;

show databases;
use testdb;
show tables;

create table st_info(ST_ID int, NAME varchar(20), DEPT varchar(25)) default charset=utf8;
show tables;

create table st_grade(ST_ID int, Linux int, DB int);
show tables;

explain st_info;
explain st_grade;

alter table st_info add constraint pk_stinfo primary key(ST_ID);
alter table st_grade add constraint pk_stgrade primary key(ST_ID);

explain st_info;
explain st_grade;

insert into st_info values (202201, 'LeeGilDong', 'Game');
insert into st_info values (202202, 'KimGilDong', 'Computer');
insert into st_info values (202203, 'HongGilDong', 'Game');
select * from st_info;

insert into st_grade values (202201, '80', '70');
insert into st_grade values (202202, '90', '75');
insert into st_grade values (202203, '95', '85');
select * from st_grade;


## testdb_stinfo-stgrade_query.sql

use testdb;

select NAME, DEPT from st_info;

select NAME, DEPT from st_info where ST_ID=202201;

select NAME, DEPT from st_info where DEPT='Game';

select Linux from st_grade where ST_ID=202201;

select st_info.NAME, st_info.DEPT, st_grade.Linux, st_grade.DB
from st_info, st_grade
where st_info.ST_ID=202201 and st_grade.ST_ID=202201;

update st_grade set DB=90 where ST_ID=202201;

select st_info.NAME, st_info.DEPT, st_grade.Linux, st_grade.DB
from st_info, st_grade
where st_info.ST_ID=202201 and st_grade.ST_ID=202201;

update st_info set DEPT='Computer' where ST_ID=202201;

select st_info.ST_ID, st_info.NAME, st_info.DEPT, st_grade.Linux, st_grade.DB 
from st_info, st_grade 
where st_info.ST_ID=202201 and st_grade.ST_ID=202201;


### AWS EC2 - RDS Connection - awsu

AWS -> RDS -> 데이터베이스 생성 -> 
표준 생성, MySQL, 프리티어 -> 
마스터 사용자 이름 root / asdf1234 ->
기존 VPC 보안 그룹 : aws_group 선택
데이터베이스 생성

엔드포인트 

database-1.cktpi7tixhwi.ap-northeast-2.rds.amazonaws.com

AWS -> RDS -> 데이터베이스 인스턴스 선택 -> 수정
-> 연결 -> 추가 구성 -> 퍼블릭 액세스 가능 -> 계속 ->
즉시 적용 -> DB 인스턴스 수정

# mysql -h database-1.cktpi7tixhwi.ap-northeast-2.rds.amazonaws.com -P 3306 -u root -p
Enter password:asdf1234

mysql> show databases;

mysql> create user 'mysql'@'%' identified by '1234';

mysql> create database testdb;

mysql> show databases;

mysql> grant all privileges on testdb.* to 'mysql'@'%';

mysql> flush privileges;

mysql> show grants for 'mysql'@'%';

mysql> use mysql

mysql> alter user mysql identified with mysql_native_password by '1234';

mysql> exit

connection Name : AWS  RDS
Hostname : RDS endpoint
Username : mysql
store in Keychain : 1234

위에서 실행했던 2개의  SQL문을 다시 실행하세요.


### AWS EBS - awsu

AWS EC2 -> Elastic Block Store -> 볼륨
-> 볼륨 생성 -> 크기(GiB) 10 -> 가용 영역 2c ->
볼륨 생성

AWS EC2 -> Elastic Block Store -> 볼륨
-> 볼륨 연결 -> 인스턴스 Ubuntu 선택 -> 볼륨 연결

# fdisk -l

# df -Th

# file -s /dev/xvdf

# mkfs.xfs /dev/xvdf

# mkdir /data

# mount /dev/xvdf /data

# df -Th | grep data
/dev/xvdf      xfs     10G  104M  9.9G   2% /data

# cd /data

# cd

# cp /etc/fstab /etc/fstab.org

# blkid

# vi /etc/fstab

  3 UUID=d929935c-1675-4b57-9007-768c140654de       /data   xfs     defaults,nofail 0       2

# umount /data

# !df
df -Th | grep data

# mount /data

# !df
df -Th | grep data


### Multi Web Server 생성 및 설정

## aws 콘솔에서 새로운 인스턴스 생성

# amazon linux (Amazone Linux 2 AMI (HVM) -> Name : new -> storage 만 16G으로 변경 -> 나머지는 그대로 진행…..


## 탄력적 IP 

탄력적 IP 주소 할당 -> 할당 

작업 -> 탄력적 IP 주소 연결 -> new 인스턴스 선택 -> 연결

52.78.109.35

## host computer…

## vi .ssh/config

  # aws ec2 centos
  Host new
           HostName 52.78.109.35
           User ec2-user
           IdentityFile ~/.ssh/new_aws_moon.pem

# ssh new

$ sudo passwd root

1234
1234

# su -
1234

# passwd ec2-user
1234
1234

# vi /etc/ssh/sshd_config

 38 PermitRootLogin yes

# systemctl restart sshd

# vi .ssh/authorized_keys

ssh-rsa 앞부분 삭제..

# exit

$ exit

## vi .ssh/config

  # aws ec2 centos
  Host new
           HostName 52.78.109.35
           User root
           IdentityFile ~/.ssh/new_aws_moon.pem

## host computer…

# scp -i ~/.ssh/new_aws_moon.pem ~/.ssh/new_aws_moon.pem root@new:/root

# scp -i ~/.ssh/new_aws_moon.pem ~/.ssh/config root@new:/root


## new…

# mv new_aws_moon.pem .ssh

# mv config .ssh

# scp -i .ssh/new_aws_moon.pem root@awsc:/root/.exrc .

# scp -i .ssh/new_aws_moon.pem root@awsc:/root/.bashrc .

# source .bashrc

# cp .bashrc /etc/skel
cp: overwrite '/etc/skel/.bashrc'? y

# cp .exrc /etc/skel

# su - ec2-user

$ cp /etc/skel/.bashrc .

$ cp /etc/skel/.exrc .

$ source .bashrc

$ exit
logout

# yum -y update

# yum -y install git docker make cmake gcc

—————————————————————————

# su - ec2-user

# vi .bashrc
아래 3줄 삭제…

$ cat -n .bashrc

$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash

$ . ~/.nvm/nvm.sh

$ nvm --version
0.34.0

$ nvm ls-remote

$ nvm install v10.13.0

$ nvm ls

$ node -e "console.log('Running Node.js ' + process.version)"


$ sudo yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel

$ sudo mkdir -p /var/www

$ sudo chown ec2-user /var/www

$ cd /var/www

$ ll


$ git clone https://github.com/deopard/aws-exercise-a.git

$ cd aws-exercise-a/

$ npm install

$ node app.js

자신의 IP:3000번 접속..



^c


### phusion passenger

$ cd /var/www

$ wget http://s3.amazonaws.com/phusion-passenger/releases/passenger-5.3.7.tar.gz

$ sudo mkdir /var/passenger

$ sudo chown ec2-user /var/passenger/

$ ll

$ tar xvzf passenger-5.3.7.tar.gz -C /var/passenger

$ rm -rf passenger-5.3.7.tar.gz


### ruby install - use RVM

$ cd

$ curl -sSL https://rvm.io/mpapis.asc | gpg --import -

$ curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -

$ curl -L get.rvm.io | bash -s stable

$ source /home/ec2-user/.rvm/scripts/rvm

$ rvm reload
RVM reloaded!

$ rvm install 2.4.3

$ ruby -v

$ echo export PATH=$PATH:/var/passenger/passenger-5.3.7/bin >> ~/.bash_profile

$ cat ~/.bash_profile

$ source ~/.bash_profile


## rack gem install 

$ /home/ec2-user/.rvm/gems/ruby-2.4.3/wrappers/gem install rack


## swap 확장

$ sudo dd if=/dev/zero of=/swap bs=1M count=2048

$ sudo mkswap /swap

$ sudo chmod 600 /swap

$ sudo swapon /swap

$ free


$ export ORIG_PATH="$PATH"

$ rvmsudo -E /bin/bash

# export PATH="$ORIG_PATH"

# export rvmsudo_secure_path=1

# /home/ec2-user/.rvm/gems/ruby-2.4.3/wrappers/ruby /var/passenger/passenger-5.3.7/bin/passenger-install-nginx-module

<enter>
<enter>
1<enter>
<enter>

Nginx with Passenger support was successfully installed.

<enter>

Deploying a web application

# exit


$ sudo vi /opt/nginx/conf/nginx.conf

 18     server_names_hash_bucket_size 128;

 41         server_name  53.78.109.35;
 42
 43         root    /var/www/aws-exercise-a/public;
 44         passenger_enabled       on;
 45         passenger_app_type      node;
 46         passenger_startup_file  /var/www/aws-exercise-a/app.js;

 52         #location / {
 53         #    root   html;
 54         #    index  index.html index.htm;
 55         #}
 56
 57         #error_page  404              /404.html;
 58
 59         # redirect server error pages to the static page /50x.html
 60         #
 61         #error_page   500 502 503 504  /50x.html;
 62         #location = /50x.html {
 63         #    root   html;
 64         #}

$ sudo /opt/nginx/sbin/nginx

$ netstat -ntlp

http://52.78.109.35/


https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/


### init 자동화 스크립트 생성

$ cd /etc/init.d

$ sudo vi nginx

링크 내용 붙여 넣기..

아래 부분만 수정….

 22 nginx="/opt/nginx/sbin/nginx"

 25 NGINX_CONF_FILE="/opt/nginx/conf/nginx.conf"

$ sudo chmod 755 nginx

$ exit

# netstat -ntlp

nginx pid kill

$  su - ec2-user

$ sudo service nginx start
^c

$ netstat -ntlp

$ ps -ef | grep nginx

$ sudo service nginx status

$ sudo chkconfig --add nginx

$ sudo ntsysv

nginx를 space bar로 선택 한 후 tap 눌러서 확인


### multi-server 설정

$ cd /var/www

$ git clone https://github.com/deopard/aws-exercise-b.git

$ npm install

$ sudo vi /opt/nginx/conf/nginx.conf

 90     server {
 91         listen       80;
 92         server_name  ec2-52-78-109-35.ap-northeast-2.compute.amazonaws.com;
 93
 94         root    /var/www/aws-exercise-b/public;
 95         passenger_enabled       on;
 96         passenger_app_type      node;
 97         passenger_startup_file  /var/www/aws-exercise-b/app.js;
 98
 99         error_page   500 502 503 504  /50x.html;
100         location = /50x.html {
101             root   html;
102         }
103     }

$ sudo service nginx stop
Stopping nginx (via systemctl):                            [  OK  ]

$ sudo service nginx start
Starting nginx (via systemctl):  ^C

$ sudo service nginx status

브라우저에서 ip 주소와 퍼블릭 DNS주소로 접속 후 확인..







