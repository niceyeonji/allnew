Day-58

## Build Env

Linux : 300M
jdk : 200M

jdk, editor  -> hello java

hello.java

javac hello.java

hello.class

java hello

= 600M


## Run ENV

Linux : 8M
jre : 8M

16M

hello.class

java hello

= 20M


### Multi stage build - Nginx Server

# ssh awsu

# git clone https://github.com/dashsaurabh/docker-react-application

# cd docker-react-application

## Dockerfile

  1 #Build Stage Start
  2
  3 #Specify a base image
  4 FROM node:16.13.0 as builder
  5
  6 #Specify a working directory
  7 WORKDIR '/app'
  8
  9 #Copy the dependencies file
 10 COPY package.json .
 11
 12 #Install dependencies
 13 RUN npm install
 14
 15 #Copy remaining files
 16 COPY . .
 17
 18 #Build the project for production
 19 RUN npm run build
 20
 21 #Run Stage Start
 22 FROM nginx
 23
 24 #Copy production build files from builder phase to nginx
 25 COPY --from=builder /app/build /usr/share/nginx/html


## Makefile

  1 build:
  2         docker build -t myreact .
  3 run:
  4         docker run -p 8000:80 myreact
  5 exec:
  6         docker exec -it myreact /bin/bash
  7 ps:
  8         docker ps -a
  9 img:
 10         docker images
 11 rm:
 12         docker rm -f $$(docker ps -aq)
 13 rmi:
 14         docker rmi $$(docker images -q)


# make build

# make img

# make run

http://IP:8000



^c

# make ps

# make rm 

# make rmi

# make img


### Dockerfile - RUN

RUN 사용법

	0.	Shell 형식

RUN apt-get install -y nginx

	0.	EXEC 형식

RUN [“/bin/bash”, “-c”, ”apt-get install -y nginx”]


# cd ..

# mkdir dockerfile-run

# cd dockerfile-run/

# cp ../docker-react-application/Dockerfile .

# cp ../docker-react-application/Makefile .


## Dockerfile

  1 # Base Images
  2 FROM ubuntu:latest
  3
  4 # RUN Command
  5 RUN echo Hello~ Its shell type command.
  6 RUN ["echo", "Hello~ Its exec type command."]
  7 RUN ["/bin/bash", "-c","echo 'Hello~ Its /bin/bash execution in shell type command.'"]


## Makefile

  1 build:
  2         docker build -t run-sample .
  3 history:
  4         docker history run-sample
  5 ps:
  6         docker ps -a
  7 img:
  8         docker images
  9 rm:
 10         docker rm -f $$(docker ps -aq)
 11 rmi:
 12         docker rmi $$(docker images -q)


# make build

# make history

# make img

# make rmi



### Dockerfile - CMD

# cd ..

# mkdir dockerfile-cmd1

# cd dockerfile-cmd1

# cp ../dockerfile-run/* .


## Dockerfile

  1 # Base Images
  2 FROM ubuntu:latest
  3
  4 # nginx install
  5 RUN apt -y update && apt -y upgrade
  6 RUN apt -y install nginx
  7 RUN echo "\ndaemon off;" >> /etc/nginx/nginx.conf
  8 RUN chown -R www-data:www-data /var/lib/nginx
  9
 10 VOLUME [“/data“, "/etc/nginx-site-enabled", "/var/log/nginx"]
 11
 12 WORKDIR /etc/nginx
 13
 14 # port
 15 EXPOSE 80
 16 EXPOSE 443
 17
 18 # server execution
 19 CMD ["nginx"]


## Makefile

  1 build:
  2         docker build -t cmd1 .
  3 run:
  4         docker run -it -d -p 8000:80 cmd1
  5 ps:
  6         docker ps -a
  7 img:
  8         docker images
  9 rm:
 10         docker rm -f $$(docker ps -aq)
 11 rmi:
 12         docker rmi $$(docker images -q)


# make build

# make run

# make img

# make ps

# docker ps

# docker exec -it gifted_heisenberg /bin/bash

root@bf65fcbd45c3:/# cd /data

root@bf65fcbd45c3:/data# ls

root@bf65fcbd45c3:/data# cd /etc/nginx-site-enabled/

root@bf65fcbd45c3:/etc/nginx-site-enabled# cd /data

root@bf65fcbd45c3:/data# touch volume_test


## host computer..

# docker inspect gifted_heisenberg | grep volume

## /data

# cd /var/lib/docker/volumes/543e3ea6f5a1aad0fb75dd49947ed5a78a38e555a415d6a09c040254ff459897/_data


## /etc/nginx-site-enabled

# cd /var/lib/docker/volumes/4671ad3e7f70cf2f604abe0e8e30ffe6911a5d9ad12e5cb846fe9713984fe185/_data


## /var/log/nginx

# cd /var/lib/docker/volumes/
48d64ae1fcd9aab1176f94ddebc5a3f9b1c8c987ff559fbf96129dcc1249971a/_data


root@7315ceddcf5a:/etc/nginx# exit


# make rm 

# make rmi



# cd ..

# cp -r dockerfile-cmd1 dockerfile-cmd2

# cd dockerfile-cmd2


## Dockerfile

  1 # Base Images
  2 FROM ubuntu:latest
  3
  4 # nginx install
  5 RUN apt -y update && apt -y upgrade
  6 RUN apt -y install nginx
  7 RUN echo "\ndaemon off;" >> /etc/nginx/nginx.conf
  8 RUN chown -R www-data:www-data /var/lib/nginx
  9
 10 VOLUME ["/data", "/etc/nginx-site-enabled", "/var/log/nginx"]
 11
 12 WORKDIR /etc/nginx
 13
 14 # port
 15 EXPOSE 80
 16 EXPOSE 443
 17
 18 # server execution
 19 CMD ["nginx"]


## Makefile

  1 build:
  2         docker build -t cmd2 .
  3 run:
  4         docker run -it -d -p 8000:80 -v /docker/data:/data -v /docker/nginxsite:/etc/nginx-site-enabled -v /docke    r/nginxlog:/var/log/nginx cmd2
  5 ps:
  6         docker ps -a
  7 img:
  8         docker images
  9 rm:
 10         docker rm -f $$(docker ps -aq)
 11 rmi:
 12         docker rmi $$(docker images -q)


# make build

# make run

# cd /docker

# ls

# cd -

# make img

# make ps

# make rm 

# make rmi

# make img


# cd ..

# cp -r dockerfile-cmd2/ dockerfile-entrypoint

# cd dockerfile-entrypoint

## Dockerfile

  1 # Base Images
  2 FROM ubuntu:latest
  3
  4 # nginx install
  5 RUN apt -y update && apt -y upgrade
  6
  7 # server execution
  8 ENTRYPOINT ["top"]
  9 CMD ["-d", "10"]


## Makefile

  1 build:
  2         docker build -t ctop .
  3 run:
  4         docker run -it ctop
  5 run2:
  6         docker run -it ctop -d 2
  7 ps:
  8         docker ps -a
  9 img:
 10         docker images
 11 rm:
 12         docker rm -f $$(docker ps -aq)
 13 rmi:
 14         docker rmi $$(docker images -q)


# make build

# make img

# make run
q

# make ps

# make run2
q

# make ps

# make rm

# make rmi

# make img



### Dockerfile - ONBUILD




# cd ..

# git clone https://github.com/asashiho/dockertext2

# cd dockertext2/chap05/onbuild

## Dockefile.base

  1 # Base Images
  2 FROM ubuntu:16.04
  3
  4 # Nginx Install
  5 RUN apt-get -y update && apt-get -y upgrade
  6 RUN apt-get -y install nginx
  7 RUN echo "\ndaemon off;" >> /etc/nginx/nginx.conf
  8
  9 # Port setup
 10 EXPOSE 80
 11
 12 # Web Content allocation
 13 ONBUILD ADD website.tar /var/www/html/
 14
 15 # Nginx execution
 16 CMD ["nginx"]

# cp /allnew/docker/dockerfile-cmd1/Makefile .


##  Dockerfile

#Docker base images
FROM web-base


## Makefile

  1 build-base:
  2         docker build -t web-base -f Dockerfile.base .
  3 build:
  4         docker build -t photoview .
  5 inspect:
  6         docker inspect --format="{{.Config.OnBuild}}" web-base
  7 run:
  8         docker run -it -d -p 8000:80 photoview
  9 ps:
 10         docker ps -a
 11 img:
 12         docker images
 13 rm:
 14         docker rm -f $$(docker ps -aq)
 15 rmi:
 16         docker rmi $$(docker images -q)

# cd ../../

# mv chap05 /allnew/docker

# cd /allnew/docker

# rm -rf dockertext2

# rm -rf onbuild

# cd chap05/onbuild


# make build-base

# make img

# make build

# make inspect

# make run



# make ps

# make rm

# make rmi

# make img


### Dockerfile - Image layer

# cp -r dockerfile-cmd1 layer1

# cd layer1/

## Dockerfile

  1 # Base Images
  2 FROM centos:centos7
  3
  4 # nginx install
  5 RUN yum -y install httpd
  6 RUN yum -y install php
  7 RUN yum -y install php-mbstring
  8 RUN yum -y install php-pear


## Makefile

  1 build:
  2         docker build -t centos .
  3 run:
  4         docker run -it -d —name centos centos
  5 history:
  6         docker history centos
  7 ps:
  8         docker ps -a
  9 img:
 10         docker images
 11 rm:
 12         docker rm -f $$(docker ps -aq)
 13 rmi:
 14         docker rmi $$(docker images -q)

# make build

# make img

# make history


# make run

# make ps

# make rm

# make rmi

# make img


# cd ..

# cp -r layer1 layer2

# cd layer2


## Dockerfile

  1 # Base Images
  2 FROM centos:centos7
  3
  4 # nginx install
  5 RUN yum -y install httpd \
  6         php \
  7         php-mbstring \
  8         php-pear

# make build

# make img

# make history



# make run

# make ps

# make rm

# make rmi

# make img


### Dockerfile - Signal

kill -l

1 : SIGHUP
2 : SIGINT
3 : SIGQUIT

9 : SIGKILL

15 : SIGTERM
20 : SIGTSTP


# cd ..

# cp -r layer1 signal

# cd signal


## sig_test.js

  1 'use strict';
  2
  3 var http = require("http");
  4 var server = http.createServer(function (req, res) {
  5     res.writeHead(200, {'Content-Type':'text/plain'});
  6     res.end('Hello World\n');
  7 }).listen(8000, '0.0.0.0');
  8
  9 console.log('Server Started...');
 10
 11 var signals = {
 12     'SIGINT':2,
 13     'SIGTERM':15
 14 };
 15
 16 function shutdown(signal, value) {
 17     server.close(function() {
 18         console.log('Server Stopped by ' + signal);
 19         process.exit(128 + value);
 20     });
 21 }
 22
 23 Object.keys(signals).forEach(function (signal) {
 24     process.on(signal, function () {
 25         shutdown(signal, signals[signal]);
 26     });
 27 });


## package.json

     1	{
     2	    "name" : "node_signal_test_app",
     3	    "version" : "1.0.0",
     4	    "description" : "node_signal_test_app",
     5	    "main" : "sig_test.js",
     6	    "private" : "true",
     7	    "scripts" : {
     8	        "test":"echo \"Error : no test spectified \" && exit 1",
     9	        "start":"node index"
    10	    },
    11	    "repository" : {
    12	    },
    13	    "author" : "Moon",
    14	    "license" : "MIT",
    15	    "bugs" : {
    16	        "url":"test.com"
    17	    },
    18	    "homepage":"test.com"
    19	}


## Dockerfile

  1 # Base Images
  2 FROM iojs:onbuild
  3
  4 # action
  5 COPY ./sig_test.js ./sig_test.js
  6 COPY ./package.json ./package.json
  7
  8 # port
  9 EXPOSE 8000
 10
 11 # exec
 12 ENTRYPOINT ["node","sig_test"]


## Makefile

  1 build:
  2         docker build -t node_signal_test_app .
  3 run:
  4         docker run -it -p 8000:8000 --name node_signal node_signal_test_app
  5 history:
  6         docker history node_signal
  7 stop:
  8         docker stop node_signal
  9 kill:
 10         docker kill --signal="SIGTERM" node_signal
 11 ps:
 12         docker ps -a
 13 img:
 14         docker images
 15 rm:
 16         docker rm -f $$(docker ps -aq)
 17 rmi:
 18         docker rmi $$(docker images -q)


# make build

# make img

# make run

## 새로운 터미널에서….

# curl 13.124.4.168:8000/


# make stop



## 원래 터미널에서….

# make ps

# make rm

# make run
^c





### Dockerfile - Healthcheck

# cd ..

# cp -r layer1 health

# cd health/


## Dockerfile

  1 # Step 1 : Base Images
  2 FROM ubuntu:latest
  3
  4 # Step 2 : Install Packages
  5 RUN apt -y update && apt -y upgrade && apt -y install nginx && apt -y install curl
  6 RUN echo "\ndaemon off;" >> /etc/nginx/nginx.conf
  7
  8 # Step 3
  9 COPY index.html /var/www/html
 10
 11 # Step 4
 12 HEALTHCHECK --interval=10s --timeout=3s CMD curl -f http://localhost/ || exit 1
 13
 14 # Step 5
 15 CMD ["nginx"]


## Makefile

  1 build:
  2         docker build -t health_test .
  3 run:
  4         docker run -it -d -p 8000:80 —name health health_test
  5 inspect:
  6         docker inspect health
  7 ps:
  8         docker ps -a
  9 img:
 10         docker images
 11 rm:
 12         docker rm -f $$(docker ps -aq)
 13 rmi:
 14         docker rmi $$(docker images -q)


## index.html

<!Doctype html>
<html>
<head>
<title>Docker - Ubuntu - nginx!!</title>
</head>
<body>
    <h1>Docker - ubuntu - nginx!!</h1>
</body>
</html>


# make build

# make img

# make run

# curl 13.124.4.168:8000/



# make ps

# make inspect

# make rm

# make rmi

# make img


### Dockerfile - ENV Command

env command 지정 방법

1. name value
2. name=value


1. key value

ENV NAME “MOON”
ENV NICKNAME “IMP” ENV AGE 27


2. key=value
ENV NAME=“MOON” \
          NICKNAME=“IMP” \
          AGE=27

* dockerfile외에서 —env 옵션을 통해서 환경변수 지정 가능.


# cp -r health/ env

# cd env


## Dockerfile

  1 # Step 1 : Base Images
  2 FROM ubuntu:latest
  3
  4 # Step 2 : ENV Setup
  5 ENV NAME="Moon" \
  6         NICKNAME="imp" \
  7         AGE="27"


## Makefile

  1 build:
  2         docker build -t ubuntu .
  3 run:
  4         docker run -it --name ubuntu ubuntu
  5 history:
  6         docker history ubuntu
  7 ps:
  8         docker ps -a
  9 img:
 10         docker images
 11 rm:
 12         docker rm -f $$(docker ps -aq)
 13 rmi:
 14         docker rmi $$(docker images -q)

# make build

# make run
docker run -it --name ubuntu ubuntu

root@1edf9a84e8ad:/# echo $NAME
Moon

root@1edf9a84e8ad:/# echo $NICKNAME
imp

root@1edf9a84e8ad:/# echo $AGE
27

root@1edf9a84e8ad:/# exit
exit

# docker start ubuntu
ubuntu

# docker exec -it -e NAME="Kim" ubuntu /bin/bash

root@1edf9a84e8ad:/# echo $NAME
Kim

root@1edf9a84e8ad:/# exit
exit

# make rm

# make rmi

# make img

————————————————————————

# cd /allnew/docker

# rm -rf docker-react-application

# git add .

# git commit -m "docker"

# git push

————————————————————————


### Dockerfile 주요 명령어

Dockerfile format

# comment
Command Parameter


FROM

: Base Image setup

FROM image
FROM image:tag


[ex]

FROM ubuntu:latest

FROM ubuntu:12

FROM python:3.8-alpine


WORKDIR

: Working directory change in docker container

WORKDIR path

[ex]

WORKDIR /var/www/html


RUN

: Command Execution in docker container

RUN full-command
RUN [“command”, “paratmer1”, “paratmer2” ]

[ex]

RUN apk add curk

RUN npm install —silent

RUN pip install -r requirement.txt

RUN [“npm”, “install”, “—silent”]


ENTRYPOINT

: Command Execution in docker container. 
Always Execution Command set in docker container.

ENTERYPOINT full-command
ENTERYPOINT [“command”, “paratmer1”, “paratmer2” ]

ENTERYPOINT [“npm”, “start”]

ENTERYPOINT [“python”, “manage.py”, “runserver”]


CMD

: Command Execution in docker container. 
Always Execution Command set in docker container.
Paramter transfer to Executed Command using ENTRYPOINT

CMD full-command
CMD [“command”, “paratmer1”, “paratmer2” ]

ENTERYPOINT [“command” ]
CMD [“paratmer1”, “paratmer2” ]

[ex]

## Dockerfile

ENTERYPOINT [“node” ]
CMD [“index.js” ]


# docker run ubuntu
: index.js execution

# docker run ubuntu main.js
: main.js execution


// RUN vs CMD

docker run

RUN : Multi exec
CMD : once exec

## Dockerfile
CMD [“echo”, “Hi”]

# docker run ubuntu
Hi

# docker run ubuntu echo Bye
Bye



EXPOSE

: set open port in container. 
-p option using docker run…..

EXPOSE 80
EXPOSE 9999/tcp


COPY / ADD

COPY <src> <dest>
COPY [“<src>”, “<dest>”]

[ex]

COPY package.json .

WORKDIR /app
COPY . .
: copy all files : host -> docker 


// ADD vs COPY

ADD : all file(compress files, network files)
COPY : normal file


ENV

: transfer environment variable docker build or execution container

ENV <name> <value>
ENV <name>=<value>

[ex]

ENV NODE_ENV=production



ARG

: parameter tranfer docker build

ARG <name>
ARG <name>=<value>

[ex1]

## Dockerfile
……
……
ARG port
……
CMD start.sh -h localhost -p ${port}

# docker build —build-arg port=8080 .


[ex2]

## Dockerfile
……
……
ARG port=8080
……
CMD start.sh -h localhost -p ${port}


.dockerignore file
: dockerfile 내에서 작성하고 build 시 제외할 때 사용

[ex]

## .dockerignore
.git
.md


### Docker registry

# docker images

# docker pull registry

# docker images

# docker run -d -p 5000:5000 --name registry registry

# docker ps

# docker pull ubuntu

# docker images

# docker ps -a

# docker tag ubuntu localhost:5000/ubuntu

# docker images

# docker push localhost:5000/ubuntu

# docker images

# docker rmi localhost:5000/ubuntu

# docker images

# docker rmi ubuntu

# docker images

# docker pull localhost:5000/ubuntu

# docker images

# docker run -it -d localhost:5000/ubuntu

# docker ps -a

# docker rm -f $(docker ps -aq)

# docker ps -a

# docker rmi $(docker images -q)

# docker images



