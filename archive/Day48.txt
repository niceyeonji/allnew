Day-48

# netstat -ntlp

# lsnrctl status

# lsnrctl start

# lsnrctl status

# sqlplus hr/1234@xe

SQL> exit



## pycham….

# pip install cx-Oracle

Oracle Instant Client Downloads

Oracle Instant Client Downloads for Microsoft Windows (x64) 64-bit

instantclient-basic-windows.x64-19.18.0.0.0dbru.zip


— for windows

c:\OracleXE\instantclient_19_18

Path 환경변수 편집 -> c:\OracleXE\instantclient_19_18


— for Ubuntu

instantclient-basic-linux.x64-19.19.0.0.0dbru.zip download

## hosts computer..

# scp instantclient-basic-linux.x64-19.19.0.0.0dbru.zip root@192.168.1.12:/usr/local

## ubuntu..

# cd /usr/local

# mkdir OracleXE

# mv instantclient-basic-linux.x64-19.19.0.0.0dbru.zip OracleXE/

# cd OracleXE

# unzip instantclient-basic-linux.x64-19.19.0.0.0dbru.zip

# vi /etc/profile

     36 export LD_LIBRARY_PATH=$ORACLE_HOME/bin:/usr/local/OracleXE/instantclient_19_19

# source /etc/profile

# source ~/.bashrc

# echo $LD_LIBRARY_PATH


## p471_oracleConn.py

import cx_Oracle

# cx_Oracle.init_oracle_client(lib_dir="/Users/Lune/OracleXE/instantclient_19_8")
cx_Oracle.init_oracle_client(lib_dir="/usr/local/OracleXE/instantclient_19_19")

conn = None  # 접속 객체
cur = None  # 커서 객체

try:
    # 아이디/비번@hostname:port_number/sid
    loginfo = 'hr/1234@192.168.1.200:1521/xe'
    conn = cx_Oracle.connect(loginfo)
    print(type(conn))

    cur = conn.cursor()
    print(type(cur))

    sql = 'select power(2, 10) from dual'
    cur.execute(sql)

    for item in cur:
        print(item)

except Exception as err:
    print(err)

finally:
    if cur != None:
        cur.close()

    if conn != None:
        conn.close()

print('finished')



## myterror_table.txt

create table myterror(
	eventid number,
	iyear number,
	imonth number,
	iday number,
	country number,
	country_txt varchar2(255),
	region number,
	region_txt varchar2(255),
	provstate varchar2(255),
	city varchar2(255),
	latitude number,
	longitude number
);

sql developer에 붙여 넣기 하고 실행….


## centos..

# cd /allnew/python/pythonDataProcess

# ls myterror*

# sqlldr userid=hr/1234 control=myterror.ctl


sql developer

select count(*) from myterror;

57196


SQL 실행..

create table country_summary as 
select country_txt, count(*) as cnt from myterror
group by country_txt order by cnt desc;

select * from country_summary;

create table country_summary_top_10 as
select country_txt, cnt
from (
    select country_txt, cnt, rank() over(order by cnt desc) as ranking
    from country_summary
)
where ranking between 1 and 10;

select * from country_summary_top_10;


## p481_oracleTest.py

import cx_Oracle
import pandas as pd
import matplotlib.pyplot as plt 
from pandas import Series

cx_Oracle.init_oracle_client(lib_dir="/usr/local/OracleXE/instantclient_19_19")

plt.rc('font', family="AppleGothic")

conn = None
cur = None

try:
    loginfo = 'hr/1234@192.168.1.200:1521/xe'
    conn = cx_Oracle.connect(loginfo)
    cur = conn.cursor()

    sql = 'select * from country_summary_top_10'
    cur.execute(sql)

    data = []
    country = []

    for result in cur:
        data.append(result[1])
        country.append(result[0])
    mycolor = ['r', 'g','b','y','m','c','#fff0f0','#ccffbb','#05ccFF','#11ccff']

    charData  = Series(data, index=country)
    charData.plot(kind='bar', rot=18, grid=False, title='범죄 빈도 Top 10 국가',color=mycolor, alpha=0.7)

    plt.ylabel('빈도 수', rotation=0)

    filename = 'oracleChart01.png'
    plt.savefig(filename, dpi=400, bbox_inches='tight')
    print(filename + ' file saved...')

    plt.show()

    myframe = pd.read_sql(sql, conn, index_col="COUNTRY_TXT")
    print(type(myframe))
    print(myframe)

except Exception as err:
    print(err)

finally:
    if cur != None:
        cur.close()

    if conn != None:
        conn.close()
print('finished')


## hosts computer..

# scp AppleGothic.ttf root@192.168.1.12:/root


## ubuntu..

# cd /root

# mkdir -p /usr/share/fonts/truetype/AppleGothic

# cp AppleGothic.ttf /usr/share/fonts/truetype/AppleGothic

# mv AppleGothic.ttf /usr/local/lib/python3.10/dist-packages/matplotlib/mpl-data/fonts/ttf

# fc-cache -fv

# rm -rf ~/.cache/matplotlib/*


sql developer

create or replace view three_country
as
select country_txt, iyear, count(*) as cnt
from myterror
where country_txt in('Iraq','Pakistan','Afghanistan')
group by country_txt, iyear
order by country_txt desc, iyear asc;

select * from three_country;


## p485_oracleTest.py

import cx_Oracle
import pandas as pd
import matplotlib.pyplot as plt 
from pandas import Series

cx_Oracle.init_oracle_client(lib_dir="/usr/local/OracleXE/instantclient_19_19")

plt.rc('font', family="AppleGothic")

conn = None
cur = None

try:
    loginfo = 'hr/1234@192.168.1.200:1521/xe'
    conn = cx_Oracle.connect(loginfo)
    cur = conn.cursor()

    sql = 'select * from three_country'
    cur.execute(sql)

    name = []
    year = []
    bindo = []

    for result in cur:
        name.append(result[0])
        year.append(result[1])
        bindo.append(result[2])

    myseries  = Series(bindo, index=[name, year])
    print(myseries)

    for idx in range(0, 2):
        myframe = myseries.unstack(idx)
        print(myframe)
        myframe.plot(kind='barh', rot=0)
        plt.title('3개국 테러 발생 현황')
        
        filename = 'oracleChart02_0' + str(idx + 1) + '.png'
        plt.savefig(filename, dpi=400, bbox_inches='tight')
        print(filename + ' file saved...')

        plt.show()

except Exception as err:
    print(err)

finally:
    if cur != None:
        cur.close()

    if conn != None:
        conn.close()
print('finished')


sql developer

create table bungi
as
select 
case imonth
    when 1 then '일사분기'
    when 2 then '일사분기'
    when 3 then '일사분기'
    when 4 then '이사분기'
    when 5 then '이사분기'
    when 6 then '이사분기'
    when 7 then '삼사분기'
    when 8 then '삼사분기'
    when 9 then '삼사분기'
    when 10 then '사사분기'
    when 11 then '사사분기'
    when 12 then '사사분기'
end as result
from myterror;

select * from bungi;

select distinct result from bungi;

create table bungitable
as
select result as bungi, count(*) as mycount, 0 as ordering
from bungi
group by result;

update bungitable set ordering=1 where bungi='일사분기';
update bungitable set ordering=2 where bungi='이사분기';
update bungitable set ordering=3 where bungi='삼사분기';
update bungitable set ordering=4 where bungi='사사분기';

commit;

select bungi, mycount from bungitable order by ordering;

—————————————————————————

create table region_summary
as
select region_txt, count(*) as cnt
from myterror
group by region_txt
order by cnt desc;

create table region_summary_ranking
as
select region_txt, cnt
from (
    select region_txt, cnt, rank() over(order by cnt desc) as ranking
    from region_summary
)
where ranking between 5 and 8;

select * from region_summary_ranking;

—————————————————————————


## p490_xmlEx.py

from xml.etree.ElementTree import parse

tree = parse('xmlEx_03.xml')
myroot = tree.getroot()
print(type(myroot))
print('-' * 40)

families = myroot.findall('가족')
print(type(families))
print('-' * 40)

for onefamily in families:
    for onesaram in onefamily:
        if len(onesaram) >= 1:
            print(onesaram[0].text)
        else:
            print(onesaram.attrib['이름'])
    print('-' * 40)
print('finished')


sql developer

create table shops(
    aname1 varchar2(255),
    aname2 varchar2(255),
    aname3 varchar2(255),
    aname4 varchar2(255),
    aname5 varchar2(255),
    aname6 varchar2(255),
    aname7 varchar2(255),
    aname8 varchar2(255)
);


# cp /data/*.xml .

# chmod 644 *.xml


## p492_oracleShop.py

import cx_Oracle
from xml.etree.ElementTree import parse

cx_Oracle.init_oracle_client(lib_dir="/usr/local/OracleXE/instantclient_19_19")

conn = None
cur = None

tree = parse('xmlEx_04_total.xml')
myroot = tree.getroot()

try:
    loginfo = 'hr/1234@192.168.1.200:1521/xe'
    conn = cx_Oracle.connect(loginfo, encoding='utf-8')
    print(type(conn))

    mycursor = conn.cursor()
    print(type(mycursor))

    items = myroot.findall('item')

    for oneitem in items:
        sql = " insert into shops"
        sql += " values('"
        sql += oneitem[0].text + "', '"
        sql += oneitem[1].text + "', '"
        sql += oneitem[2].text + "', '"
        sql += oneitem[3].text + "', '"
        sql += oneitem[4].text + "', '"
        sql += oneitem[5].text + "', '"
        sql += oneitem[6].text + "', '"
        sql += oneitem[7].text + "' "
        sql += " )"
        mycursor.execute(sql)

    conn.commit()

except Exception as err:
    if conn != None:
        conn.rollback()
    print(err)

finally:
    if cur != None:
        cur.close()

    if conn != None:
        conn.close()
print('finished')


sql developer

select * from shops;


## p498_getJson.py

import json

def get_Json_data():
    filename = 'jumsu.json'
    myfile = open(filename, 'rt', encoding='utf-8')
    print(type(myfile))
    print('-' * 40)

    myfile = myfile.read()
    print(type(myfile))
    print('-' * 40)

    jsondata = json.loads(myfile)
    print(type(jsondata))
    print('-' * 40)

    for oneitem in jsondata:
        print(oneitem.keys())
        print(oneitem.values())
        print('이름 :', oneitem['name'])
        kor = float(oneitem['kor'])
        eng = float(oneitem['eng'])
        math = float(oneitem['math'])
        total = kor + eng + math

        print('국어 : ', kor)
        print('영어 : ', eng)
        print('수학 : ', math)
        print('총점 : ', total)

        if 'hello' in oneitem.keys():
            message = oneitem['hello']
            print('message : ', message)

        _gender = oneitem['gender'].upper()

        if _gender == “M”:
            gender = '남자' 
            print('성별 : ', gender)       
        elif _gender == “F”:
            gender = '여자' 
            print('성별 : ', gender)  
        else:
            print('미정')
    print('-' * 40)

if __name__ == '__main__':
    get_Json_data()
     

## p500_jsonTest.py

import json

data = {'age':30, 'name':"홍길동", 'address':'마포구 공덕동', \
        'broadcast':{
            'sbs':5, 'kbs':9, 'mbc':11
        }
    }

json_str = json.dumps(data, ensure_ascii=False, indent=4, sort_keys=True)
print(json_str)
print(type(json_str))
print('-' * 40)

json_data = json.loads(json_str)
print(json_data)
print(type(json_data))
print('-' * 40)

print(json_data['name'])
print(json_data['age'])
print(json_data['broadcast']['kbs'])

print('finished')


## p515_BusanHospital.py

import json, urllib.request, datetime, math
import os.path

BASE_DIR = os.path.dirname(os.path.dirname(os.path.relpath("./")))
secret_file = os.path.join(BASE_DIR, '../secret.json')

with open(secret_file) as f:
    secrets = json.loads(f.read())

def get_secret(setting, secrets=secrets):
    try:
        return secrets[setting]
    except KeyError:
        errorMsg = "Set the {} environment variable.".format(setting)
        return errorMsg

def getRequestUrl(url):
    req = urllib.request.Request(url)
    try:
        response = urllib.request.urlopen(req)
        if response.getcode() == 200:
            return response.read().decode('utf-8')
    except Exception as e:
        print("[%s] Error for URL : %s" % (datetime.datetime.now(), url))
        return None

def getHospitalData(pageNo, numOfRows):
    end_point = 'http://apis.data.go.kr/6260000/MedicInstitService/MedicalInstitInfo'

    parameters = ''
    parameters += "?resultType=json"
    parameters += "&serviceKey=" + get_secret("busan_h_apiKey")
    parameters += "&pageNo=" + str(pageNo) 
    parameters += "&numOfRows=" + str(numOfRows)  
    url = end_point + parameters

    print('URL')
    print(url)

    result = getRequestUrl(url)
    if (result == None):
        return None
    else:
        return json.loads(result)

jsonResult = []

pageNo = 1  
numOfRows = 100 
nPage = 0
while(True):
    print('pageNo : %d, nPage : %d' % (pageNo, nPage))
    jsonData = getHospitalData(pageNo, numOfRows)
    print(jsonData)

    if (jsonData['MedicalInstitInfo']['header']['resultCode'] == '00'):
        totalCount = jsonData['MedicalInstitInfo']['body']['totalCount']
        print('데이터 총 개수 : ', totalCount)  

        for item in jsonData['MedicalInstitInfo']['body']['items']['item']:
            jsonResult.append(item)

        if totalCount == 0:
            break
        nPage = math.ceil(totalCount / numOfRows)
        if (pageNo == nPage):  
            break  

        pageNo += 1
    else :
        break

    savedFilename = 'xx_Busan_medical.json'
    with open(savedFilename, 'w', encoding='utf8') as outfile:
        retJson = json.dumps(jsonResult, indent=4, sort_keys=True, ensure_ascii=False)
        outfile.write(retJson)

    print(savedFilename + ' file saved..')



