Day-51

http://aws.amazon.com 

-> 콘솔에 로그인

Account ID
사용자 이름
User PW

비밀 번호를 변경해주세요.
: qwerty!1


### AWS EC2 - amazon linux

## 인스턴스 생성 

인스턴스 이름 : aws_centos

Amazon Linux 선택 후 나머지는 그대로..


##키페어 생성

키 페어 이름 : aws_moon

## host computer…

# cd ~

# mkdir aws

# cd aws

# mv ~/Downloads/*.pem .

# ls


## 보안 그룹 생성
 
편집 누르고 ..

보안 그룹 이름 : aws_group


## 보안 그룹 추가 - 위치 무관
80
3000
3306
5000
8000
8080
27017


## 스토리지 구성

30GB 

인스턴스 시작


## 탄력적 IP 

탄력적 IP 주소 할당 -> 할당

작업 - 탄력적 IP 주소 연결 -> 인스턴스 선택 -> 연결


## 본인의 탄력적 IP 복사..

43.201.233.18


## host computer…

# bash

# chmod 600 aws_moon.pem

# exit

# ssh -i ~/aws/aws_moon.pem ec2-user@43.201.233.18

$ sudo passwd root
1234
1234

$ su -
Password: 1234

# id


# vi /etc/ssh/sshd_config

 41 PermitRootLogin yes


# systemctl restart sshd

# exit

$ exit


# ssh -i ~/aws/aws_moon.pem root@43.201.233.18
^C

# ssh -i ~/aws/aws_moon.pem ec2-user@44.199.70.185

$ su -


# vi .ssh/authorized_keys

ssh-rsa 앞부분 삭제…..

# exit 

$ exit

# ssh -i ~/aws/aws_moon.pem root@43.201.233.18

# exit


# cd ~/.ssh

# bash


# vi config

# aws ec2 centos
       Host awsc
       HostName 43.201.233.18
       User root
       IdentityFile ~/.ssh/aws_moon.pem


# cp ../aws/aws_moon.pem .

# exit

# ssh awsc


# cat > .exrc
set nu ai sm
^d

# vi .bashrc

 23
 24 # Source global definitions
 25 if [ -f /etc/bashrc ]; then
 26         . /etc/bashrc
 27 fi
 28
 29 alias c='clear'
 30 alias h='history'
 31 alias df='df -Th'
 32 alias grep='grep --color=auto'
 33 alias ls='ls -aCF --color=auto'
 34 alias ll='ls -alF --color=auto'
 35
 36 export PS1='[\[\e[1;31m\]\u\[\e[m\]@\[\e[1;32m\]\h\[\e[m\] \[\e[1;36m\]\w\[\e[m\]]\$ '

# source ~/.bashrc

# cp .bashrc /etc/skel

# cp .exrc /etc/skel

# su - ec2-user

$ cp /etc/skel/.bashrc .

$ cp /etc/skel/.exrc .

$ source .bashrc

$ exit

# yu m -y update

# yum -y install git docker make cmake gcc

# exit



### aws linux - jdk 설치

## host computer…..

jdk-8u202-linux-x64.tar.gz download

# scp -i ~/.ssh/aws_moon.pem ~/Downloads/jdk-8u202-linux-x64.tar.gz root@43.201.233.18:/root


## aws centos…..

# mkdir /usr/java

# cd /usr/java

# mv ~/jdk-8u202-linux-x64.tar.gz .

# tar xvzf jdk-8u202-linux-x64.tar.gz

# mv jdk1.8.0_202/ jdk1.8

# rm -rf *.gz


# vi /etc/profile

 77 export JAVA_HOME=/usr/java/jdk1.8
 78 export CLASSPATH=$CLASSPATH:$JAVA_HOME/jar/lib/ext:$JAVA_HOME/lib/tools.jar
 79 export PATH=$PATH:$JAVA_HOME/bin

# source /etc/profile

# javac -version
javac 1.8.0_202



### aws centos - node 설치

# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash

# source ~/.bashrc

# tail -3 ~/.bashrc

# nvm --version
0.35.2

# nvm ls-remote

# nvm install v18.16.0

# nvm ls

# nvm install v16.20.0

# nvm ls

# node -v
v16.20.0


### aws centos - SBT install

# curl -L https://www.scala-sbt.org/sbt-rpm.repo > sbt-rpm.repo

# mv sbt-rpm.repo /etc/yum.repos.d/

# yum -y install sbt

# sbt --version


### scala install

# wget https://downloads.lightbend.com/scala/2.13.10/scala-2.13.10.tgz

# mv scala-2.13.10.tgz /usr/local/

# cd /usr/local

# tar xvzf scala-2.13.10.tgz

# rm -rf scala-2.13.10.tgz

# vi /etc/profile

79 export SCALA_HOME=/usr/local/scala-2.13.10
 80 export PATH=$PATH:$JAVA_HOME/bin:$SCALA_HOME/bin

# source /etc/profile

# scala -version


### maven install

# wget https://dlcdn.apache.org/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz

# mv apache-maven-3.9.2-bin.tar.gz /usr/local

# cd /usr/local

# tar xvzf apache-maven-3.9.2-bin.tar.gz

# rm -rf apache-maven-3.9.2-bin.tar.gz

# mv apache-maven-3.9.2/ maven-3.9.2


# vi /etc/profile

 80 export MAVEN_HOME=/usr/local/maven-3.9.2
 81 export PATH=$PATH:$JAVA_HOME/bin:$SCALA_HOME/bin:$MAVEN_HOME/bin

# source /etc/profile

# mvn -v
Apache Maven 3.9.2 (c9616018c7a021c1c39be70fb2843d6f5f9b8a1c)
Maven home: /usr/local/maven-3.9.2
Java version: 1.8.0_202, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8/jre
Default locale: en, platform encoding: UTF-8
OS name: "linux", version: "6.1.27-43.48.amzn2023.x86_64", arch: "amd64", family: "unix"


## 위 과정을 완료한 후에 인스턴스 중지…

중지된 인스턴스 선택 후에 작업 -> 이미지 및 템플릿 -> 이미지 생성

이름 : aws_centos_img

이미지 -> AMI



### AWS EC2 - ubuntu

## 인스턴스 생성 

인스턴스 이름 : aws_ubuntu


## 키페어 

기존 키페어 사용

키페어 이름 : aws_moon.pem


## 보안 그룹 생성

기존 보안 그룹 사용

보안 그룹 이름 : aws_group


##스토리지 구성 

30GB


## 탄력적 IP 

탄력적 IP 주소 할당 -> 할당

작업 - 탄력적 IP 주소 연결 -> 인스턴스 선택 -> 연결

13.124.4.168


# vi .ssh/config

# aws ec2 ubuntu
	Host awsu
  	HostName 13.124.4.168
 	User root
  	IdentityFile ~/.ssh/aws_moon.pem

# ssh -i ~/aws/aws_moon.pem ubuntu@13.124.4.168

$ sudo passwd root

$ su -
Password: 1234

# vi /etc/ssh/sshd_config

 34 PermitRootLogin yes

# systemctl restart sshd

# exit

$ exit

# ssh -i ~/aws/aws_moon.pem root@43.201.233.18
^C

# ssh -i ~/aws/aws_moon.pem ubuntu@13.124.4.168

$ su -

# vi .ssh/authorized_keys

ssh-rsa 앞부분 삭제…..

# exit

$ exit

# ssh awsu

# cat > .exrc
set nu ai sm
^d

# vi .bashrc

101 # User specific aliases and functions
102
103 alias rm='rm -i'
104 alias cp='cp -i'
105 alias mv='mv -i'
106
107 # Source global definitions
108 if [ -f /etc/bashrc ]; then
109         . /etc/bashrc
110 fi
111
112 alias c='clear'
113 alias h='history'
114 alias df='df -Th'
115 alias grep='grep --color=auto'
116 alias ls='ls -aCF --color=auto'
117 alias ll='ls -alF --color=auto'
118
119 export PS1='[\[\e[1;31m\]\u\[\e[m\]@\[\e[1;32m\]\h\[\e[m\] \[\e[1;36m\]\w\[\e[m\]]\$ '

# cp .bashrc /etc/skel
cp: overwrite '/etc/skel/.bashrc'? y

# cp .exrc /etc/skel

# su - ubuntu

$ cp /etc/skel/.bashrc .

$ cp /etc/skel/.exrc .

$ source .bashrc

$ exit
logout

# apt -y update;apt -y upgrade

# apt -y install curl git docker.io make cmake gcc

# ln -s /usr/bin/python3 /usr/bin/python


## host computer..

# scp -i ~/.ssh/aws_moon.pem ~/.ssh/aws_moon.pem root@43.201.233.18:/root

# scp -i ~/.ssh/aws_moon.pem ~/.ssh/config root@43.201.233.18:/root

# scp -i ~/.ssh/aws_moon.pem ~/.ssh/aws_moon.pem root@13.124.4.168:/root

# scp -i ~/.ssh/aws_moon.pem ~/.ssh/config root@13.124.4.168:/root


# ssh awsu

## centos & ubuntu…

# mv aws_moon.pem .ssh

# mv config .ssh

# vi .ssh/config

  1 # aws ec2 centos
  2 Host awsc
  3   HostName 43.201.233.18
  4   User root
  5   IdentityFile ~/.ssh/aws_moon.pem
  6
  7 # aws ec2 ubuntu
  8 Host awsu
  9   HostName 13.124.4.168
 10   User root
 11   IdentityFile ~/.ssh/aws_moon.pem
 12
 13 # aws Lightsail nodejs-1
 14 #Host bit
 15 #  HostName 3.37.42.249
 16 #  User root
 17 #  IdentityFile ~/.ssh/LightsailDefaultKey-ap-northeast-2.pem

# ssh awsc

# exit

# ssh awsu

# exit


### aws ubuntu - jdk 설치

## host computer…..

jdk-8u202-linux-x64.tar.gz download

# scp -i ~/.ssh/aws_moon.pem ~/Downloads/jdk-8u202-linux-x64.tar.gz root@13.124.4.168:/root


## aws ubuntu…..

# mkdir /usr/java

# cd /usr/java

# mv ~/jdk-8u202-linux-x64.tar.gz .

# tar xvzf jdk-8u202-linux-x64.tar.gz

# mv jdk1.8.0_202/ jdk1.8

# rm -rf *.gz


# vi /etc/profile

 29 export JAVA_HOME=/usr/java/jdk1.8
 30 export CLASSPATH=$CLASSPATH:$JAVA_HOME/jar/lib/ext:$JAVA_HOME/lib/tools.jar
 31 export PATH=$PATH:$JAVA_HOME/bin

# source /etc/profile

# source ~/.bashrc

# javac -version
javac 1.8.0_202



### aws ubuntu - node 설치

# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash

# source ~/.bashrc

# tail -3 ~/.bashrc

# nvm --version
0.35.2

# nvm ls-remote

# nvm install v18.16.0

# nvm ls

# nvm install v16.20.0

# nvm ls

# node -v
v16.20.0


### maven install

# wget https://dlcdn.apache.org/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz

# mv apache-maven-3.9.2-bin.tar.gz /usr/local

# cd /usr/local

# tar xvzf apache-maven-3.9.2-bin.tar.gz

# rm -rf apache-maven-3.9.2-bin.tar.gz

# mv apache-maven-3.9.2/ maven-3.9.2


# vi /etc/profile

 29 export JAVA_HOME=/usr/java/jdk1.8
 30 export CLASSPATH=$CLASSPATH:$JAVA_HOME/jar/lib/ext:$JAVA_HOME/lib/tools.jar
 31 export MAVEN_HOME=/usr/local/maven-3.9.2
 32 export PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin

# source /etc/profile

# source ~/.bashrc

# mvn -v
Apache Maven 3.9.2 (c9616018c7a021c1c39be70fb2843d6f5f9b8a1c)
Maven home: /usr/local/maven-3.9.2
Java version: 1.8.0_202, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8/jre
Default locale: en, platform encoding: UTF-8
OS name: "linux", version: "6.1.27-43.48.amzn2023.x86_64", arch: "amd64", family: "unix"


## 위 과정을 완료한 후에 인스턴스 중지..

중지된 인스턴스 선택 후에 작업 -> 이미지 및 템플릿 -> 이미지 생성

이름 : aws_ubuntu_img



AMI -> 권한 편집 ->Public으로 변경..





### Virtualbox ubuntu - aws 접속 설정

## host computer…..

# scp ~/.ssh/aws_moon.pem root@192.168.1.12:/root

# scp ~/.ssh/config root@192.168.1.12:/root


## ubuntu…..

# ssh -i aws_moon.pem root@43.201.233.18

# exit

# mv aws_moon.pem .ssh

# mv config .ssh

# ssh awsc

# exit

# shutdown -h now


### Virtualbox centos - aws 접속 설정

## host computer…..

# scp ~/.ssh/aws_moon.pem root@192.168.1.200:/root

# scp ~/.ssh/config root@192.168.1.200:/root


## centos…..

# ssh -i aws_moon.pem root@43.201.233.18

# exit

# mv aws_moon.pem .ssh

# mv config .ssh

# ssh awsc

# exit

# shutdown -h now
